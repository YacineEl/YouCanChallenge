Query Optimization Report
======================

Query: weekly_active_users
Original execution time: 2.43s
Execution Plan:
GroupAggregate  (cost=70267.67..203367.40 rows=930660 width=16)
  Group Key: (date_trunc('week'::text, "timestamp"))
  ->  Gather Merge  (cost=70267.67..186734.15 rows=1000000 width=45)
        Workers Planned: 2
        ->  Sort  (cost=69267.65..70309.31 rows=416667 width=45)
              Sort Key: (date_trunc('week'::text, "timestamp")), user_id
              ->  Parallel Seq Scan on events e  (cost=0.00..17554.33 rows=416667 width=45)

Query: revenue_per_category
Original execution time: 0.14s
Execution Plan:
Sort  (cost=19020.99..19021.01 rows=8 width=16)
  Sort Key: (sum(p.price)) DESC
  ->  Finalize GroupAggregate  (cost=19018.84..19020.87 rows=8 width=16)
        Group Key: p.category
        ->  Gather Merge  (cost=19018.84..19020.71 rows=16 width=16)
              Workers Planned: 2
              ->  Sort  (cost=18018.82..18018.84 rows=8 width=16)
                    Sort Key: p.category
                    ->  Partial HashAggregate  (cost=18018.62..18018.70 rows=8 width=16)
                          Group Key: p.category
                          ->  Hash Join  (cost=148.50..17811.61 rows=41403 width=16)
                                Hash Cond: ((e.product_id)::text = (p.product_id)::text)
                                ->  Parallel Seq Scan on events e  (cost=0.00..17554.33 rows=41403 width=10)
                                      Filter: ((event_type)::text = 'purchased'::text)
                                ->  Hash  (cost=86.00..86.00 rows=5000 width=26)
                                      ->  Seq Scan on products p  (cost=0.00..86.00 rows=5000 width=26)

